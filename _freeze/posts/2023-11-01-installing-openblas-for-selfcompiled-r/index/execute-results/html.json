{
  "hash": "0d039194809e20d5ba43e7cfbcc962c1",
  "result": {
    "markdown": "---\ntitle: \"Installing OpenBLAS for self-compiled R\"\nsubtitle: |\n  How to compile, and make sure a self-compiled R uses OpenBLAS, which may be faster than the installed one.\ndate: 2023-11-01\ncategories: [R, profiling, openblas]\neditor_options:\n  chunk_output_type: console\n---\n\n\n## TL;DR\n\nWhen you compile R from scratch on Linux, it doesn't use the system BLAS libraries, it uses one that is compiled itself.\nThis BLAS library may be rather slow.\nIf you want to compile and use OpenBLAS, you then tell R to use the newly compiled library.\n\n## Compiling & Installing OpenBLAS\n\nClone and compile OpenBLAS.\nIf you've already compiled R on this machine, it should have all of the pre-requisites already installed.\n\n```\n# get it\ncd ~/software\ngit clone https://github.com/xianyi/OpenBLAS\n```\n\nWe are going to compile it in multi-threaded mode (`USE_THREAD=1`), and to use a dynamic architecture, where it will have the *gotoblas* symbols included (`DYNAMIC_ARCH=1`).\n\n```\n# compile it\ncd OpenBLAS\nmake -j USE_THREAD=1 DYNAMIC_ARCH=1\n```\n\nYou should see test output here, that indicates everything is OK.\n\nNow we create a directory to install OpenBLAS into.\nFor my purposes, this is still going to be in `~/software`.\n\n```\n# install it\nmkdir ~/software/libOpenBLAS\nmake -j PREFIX=~/software/libOpenBLAS USE_THREAD=1 DYNAMIC_ARCH=1\n```\n\n## Telling R To Use It\n\nIf you've compiled your own version of R, it should be using it's own internal BLAS and LAPACK libraries.\nYou can see this using `sessionInfo()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()[c(\"BLAS\", \"LAPACK\")]\n\n# mine shows\n# > $BLAS\n# > [1] \"/software/R-4.3.0/lib/libRblas.so\"\n#\n# > $LAPACK\n# > [1] \"/software/R-4.3.0/lib/libRlapack.so\"\n```\n:::\n\n\nSo, now we want to backup the BLAS library, and then link it to our compiled OpenBLAS.\n\n```\ncp ~/software/R-4.3.0/lib/libRblas.so ~/software/R-4.3.0/lib/libRblas.so.backup\n```\n\n```\nln -snf ~/software/libOpenBLAS/lib/libopenblas.so ~/software/R-4.3.0/lib/libRblas.so\n```\n\nWhen you start R again, you should now see that it is using a different BLAS & LAPACK library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()[c(\"BLAS\", \"LAPACK\")]\n\n# mine shows\n# > $BLAS\n# > [1] \"~/software/libOpenBLAS/lib/libopenblas.so\"\n#\n# > $LAPACK\n# > [1] \"~/software/libOpenBLAS/lib/libopenblas.so\"\n```\n:::\n\n\n## Why?\n\nThe default BLAS and LAPACK libraries that ship with R are not the most efficient versions.\nThere are decent comparisons on the internet showing substantial speedups depending on the task you are performing.\nIn my particular case, I have observed a speedup of 10X when doing a single-value-decomposition on moderately sized matrices (1600 x 1600).\nGiven what I'm doing, that is definitely worth it.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}